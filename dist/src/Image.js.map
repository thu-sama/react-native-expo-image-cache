{"version":3,"sources":["../../src/Image.js"],"names":["_","React","Image","mounted","state","uri","undefined","intensity","Animated","Value","options","onError","CacheManager","get","getPath","path","setState","load","props","prevProps","prevState","preview","transitionDuration","timing","duration","toValue","useNativeDriver","Platform","OS","start","style","defaultSource","tint","otherProps","hasDefaultSource","hasPreview","isImageReady","opacity","interpolate","inputRange","outputRange","computedStyle","StyleSheet","absoluteFill","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","backgroundColor","black","white","Component","defaultProps","AnimatedBlurView","createAnimatedComponent","BlurView"],"mappings":"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","file":"Image.js","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport {Image as RNImage, Animated, StyleSheet, View, Platform} from \"react-native\";\nimport {BlurView} from \"expo\";\nimport { type ____ImageStyleProp_Internal as ImageStyle } from \"react-native/Libraries/StyleSheet/StyleSheetTypes\";\nimport type {ImageSourcePropType} from \"react-native/Libraries/Image/ImageSourcePropType\";\n\nimport CacheManager, {type DownloadOptions} from \"./CacheManager\";\n\ntype ImageProps = {\n    style?: ImageStyle,\n    defaultSource?: ImageSourcePropType,\n    preview?: ImageSourcePropType,\n    options?: DownloadOptions,\n    uri: string,\n    transitionDuration?: number,\n    tint?: \"dark\" | \"light\",\n    onError?: () => {}\n};\n\ntype ImageState = {\n    uri: ?string,\n    intensity: Animated.Value\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n\n    mounted = true;\n\n    static defaultProps = {\n        transitionDuration: 300,\n        tint: \"dark\"\n    };\n\n    state = {\n        uri: undefined,\n        intensity: new Animated.Value(100)\n    };\n\n    async load({uri, options = {}, onError}: ImageProps): Promise<void> {\n        if (uri) {\n            try{\n                const path = await CacheManager.get(uri, options).getPath();\n                if (this.mounted) {\n                    this.setState({ uri: path });\n                }\n            }\n            catch(e){\n                onError(e);\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.load(this.props);\n    }\n\n    componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n        const {preview, transitionDuration} = this.props;\n        const {uri, intensity} = this.state;\n        if (this.props.uri !== prevProps.uri) {\n            this.load(this.props);\n        } else if (uri && preview && prevState.uri === undefined) {\n            Animated.timing(intensity, {\n                duration: transitionDuration,\n                toValue: 0,\n                useNativeDriver: Platform.OS === \"android\"\n            }).start();\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    render(): React.Node {\n        const {preview, style, defaultSource, tint, ...otherProps} = this.props;\n        const {uri, intensity} = this.state;\n        const hasDefaultSource = !!defaultSource;\n        const hasPreview = !!preview;\n        const isImageReady = !!uri;\n        const opacity = intensity.interpolate({\n            inputRange: [0, 100],\n            outputRange: [0, 0.5]\n        });\n        const computedStyle = [\n            StyleSheet.absoluteFill,\n            _.transform(\n                _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n                // $FlowFixMe\n                (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n            )\n        ];\n        return (\n            <View {...{style}}>\n                {\n                    (hasDefaultSource && !hasPreview && !isImageReady) && (\n                        <RNImage\n                            source={defaultSource}\n                            style={computedStyle}\n                            {...otherProps}\n                        />\n                    )\n                }\n                {\n                    hasPreview && (\n                        <RNImage\n                            source={preview}\n                            resizeMode=\"cover\"\n                            style={computedStyle}\n                            blurRadius={Platform.OS === \"android\" ? 0.5 : 0}\n                        />\n                    )\n                }\n                {\n                    isImageReady && (\n                        <RNImage\n                            source={{ uri }}\n                            style={computedStyle}\n                            {...otherProps}\n                        />\n                    )\n                }\n                {\n                    hasPreview && Platform.OS === \"ios\" && (\n                        <AnimatedBlurView style={computedStyle} {...{intensity, tint}} />\n                    )\n                }\n                {\n                    hasPreview && Platform.OS === \"android\" && (\n                        <Animated.View\n                            style={[computedStyle, { backgroundColor: tint === \"dark\" ? black : white, opacity }]}\n                        />\n                    )\n                }\n            </View>\n        );\n    }\n}\n\nconst black = \"black\";\nconst white = \"white\";\nconst propsToCopy = [\n    \"borderRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\"\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]}